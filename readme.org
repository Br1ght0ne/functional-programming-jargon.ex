* Functional Programming Jargon
:PROPERTIES:
:CUSTOM_ID: functional-programming-jargon
:END:

Functional programming (FP) provides many advantages, and its popularity has
been increasing as a result. However, each programming paradigm comes with its
own unique jargon and FP is no exception. By providing a glossary, we hope to
make learning FP easier.

Examples are translated from original JavaScript (ES2015) to Elixir. [[https://github.com/hemanth/functional-programming-jargon/wiki/Why-JavaScript%3F][Why
JavaScript?]] Why Elixir? Just because.

Where applicable, this document uses terms defined in the [[https://github.com/fantasyland/fantasy-land][Fantasy Land spec]].

** Table of contents :TOC_3:
- [[#functional-programming-jargon][Functional Programming Jargon]]
  - [[#arity][Arity]]
  - [[#higher-order-functions-hof][Higher-Order Functions (HOF)]]
  - [[#closure][Closure]]
    - [[#further-readingsources][Further reading/Sources]]
  - [[#partial-application][Partial Application]]
  - [[#currying][Currying]]
  - [[#function-composition][Function Composition]]
  - [[#continuation][Continuation]]
  - [[#purity][Purity]]
  - [[#side-effects][Side effects]]
  - [[#idempotent][Idempotent]]
  - [[#point-free-style][Point-Free Style]]
  - [[#predicate][Predicate]]
  - [[#contracts][Contracts]]
  - [[#category][Category]]
  - [[#value][Value]]
  - [[#constant][Constant]]
  - [[#functor][Functor]]
  - [[#pointed-functor][Pointed Functor]]
  - [[#lift][Lift]]
  - [[#referential-transparency][Referential Transparency]]
  - [[#equational-reasoning][Equational Reasoning]]
  - [[#lambda][Lambda]]
  - [[#lambda-calculus][Lambda Calculus]]
  - [[#lazy-evaluation][Lazy evaluation]]
  - [[#monoid][Monoid]]
  - [[#monad][Monad]]
  - [[#comonad][Comonad]]
  - [[#applicative-functor][Applicative Functor]]
  - [[#morphism][Morphism]]
    - [[#endomorphism][Endomorphism]]
    - [[#isomorphism][Isomorphism]]
    - [[#homomorphism][Homomorphism]]
    - [[#catamorphism][Catamorphism]]
    - [[#anamorphism][Anamorphism]]
    - [[#hylomorphism][Hylomorphism]]
    - [[#paramorphism][Paramorphism]]
    - [[#apomorphism][Apomorphism]]
  - [[#setoid][Setoid]]
  - [[#semigroup][Semigroup]]
  - [[#foldable][Foldable]]
  - [[#lens][Lens]]
  - [[#type-signatures][Type Signatures]]
  - [[#algebraic-data-type][Algebraic data type]]
    - [[#sum-type][Sum type]]
    - [[#product-type][Product type]]
  - [[#option][Option]]
  - [[#function][Function]]
  - [[#partial-function][Partial function]]
    - [[#dealing-with-partial-functions][Dealing with partial functions]]

** Arity
:PROPERTIES:
:CUSTOM_ID: arity
:END:

The number of arguments a function takes. From words like unary, binary,
ternary, etc. This word has the distinction of being composed of two suffixes,
"-ary" and "-ity." Addition, for example, takes two arguments, and so it is
defined as a binary function or a function with an arity of two. Such a
function may sometimes be called "dyadic" by people who prefer Greek roots to
Latin. Likewise, a function that takes a variable number of arguments is called
"variadic," whereas a binary function must be given two and only two arguments,
currying and partial application notwithstanding (see below).

#+BEGIN_SRC elixir
def sum(a, b), do: a + b

# The function is referred to as sum/2, because Elixir differentiates functions
# by name AND arity.

arity = :erlang.fun_info(&sum/2)[:arity] IO.puts(arity) # => 2
#+END_SRC

** Higher-Order Functions (HOF)
:PROPERTIES:
:CUSTOM_ID: higher-order-functions-hof
:END:

A function which takes a function as an argument and/or returns a function.

#+BEGIN_SRC elixir
def filter(predicate, xs), do: Enum.filter(xs, predicate)

filter(is_number, [0, '1', 2, nil]) # => [0, 2]
#+END_SRC

** Closure
:PROPERTIES:
:CUSTOM_ID: closure
:END:

A closure is a way of accessing a variable outside its scope. Formally, a
closure is a technique for implementing lexically scoped named binding. It is a
way of storing a function with an environment.

A closure is a scope which captures local variables of a function for access
even after the execution has moved out of the block in which it is defined. ie.
they allow referencing a scope after the block in which the variables were
declared has finished executing.

#+BEGIN_SRC elixir
def add_to(x), do: fn y -> x + y end

add_to_five = add_to(5)
add_to_five(3) # => 8
#+END_SRC

The function =add_to()= returns a function, lets store it in a variable called
=add_to_five= with a curried call having parameter 5.

Ideally, when the function =add_to= finishes execution, its scope, with local
variables =x= and =y= should not be accessible. But, it returns 8 on calling
=add_to_five()=. This means that the state of the function =add_to= is saved
even after the block of code has finished executing, otherwise there is no way
of knowing that =add_to= was called as =add_to(5)= and the value of x was set
to 5.

Lexical scoping is the reason why it is able to find the values of x and add -
the private variables of the parent which has finished executing. This value is
called a Closure.

The stack along with the lexical scope of the function is stored in form of
reference to the parent. This prevents the closure and the underlying variables
from being garbage collected (since there is at least one live reference to it).

A closure is a function that encloses its surrounding state by
referencing fields external to its body. The enclosed state remains
across invocations of the closure.

*** Further reading/Sources
[[http://stackoverflow.com/questions/220658/what-is-the-difference-between-a-closure-and-a-lambda][Lambda Vs Closure]]
[[http://stackoverflow.com/questions/111102/how-do-javascript-closures-work][JavaScript Closures highly voted discussion]]

** Partial Application
:PROPERTIES:
:CUSTOM_ID: partial-application
:END:

Partially applying a function means creating a new function by pre-filling some
of the arguments to the original function.

#+BEGIN_SRC elixir
def add_three(a, b, c), do: a + b + c

def five_plus(x), do: add_three(2, 3, x)

five_plus(4) # => 9
#+END_SRC

Partial application helps create simpler functions from more complex ones by
baking in data when you have it. [[#currying][Curried]] functions are automatically partially
applied.

** Currying
:PROPERTIES:
:CUSTOM_ID: currying
:END:

The process of converting a function that takes multiple arguments into a
function that takes them one at a time.

Each time the function is called it only accepts one argument and returns a
function that takes one argument until all arguments are passed.

#+BEGIN_SRC elixir
def sum(a, b), do: a + b

def curried_sum(a), do: fn b -> a + b end

curried_sum(40).(2) # => 42

add_two = curried_sum(2)

add_two.(10) # 12
#+END_SRC

** Function Composition
:PROPERTIES:
:CUSTOM_ID: function-composition
:END:

The act of putting two functions together to form a third function where the
output of one function is the input of the other.

#+BEGIN_SRC elixir
def compose(f, g), do: fn a -> a |> g |> f end

def floor_and_to_string(val), do: compose(Integer.to_string/1, floor/1)

floor_and_to_string(121.212121) # => "121"
#+END_SRC

** Continuation
:PROPERTIES:
:CUSTOM_ID: continuation
:END:

At any given point in a program, the part of the code that's yet to be executed
is known as a continuation.

#+BEGIN_SRC elixir
def print_as_string(num), do: IO.puts("Given #{num}")

def add_one_and_continue(num, cc) do
  result = num + 1
  cc.(result)
end

add_one_and_continue(2, print_as_string/1) # => "Given 3"
#+END_SRC

Continuations are often seen in asynchronous programming when the program needs
to wait to receive data before it can continue. The response is often passed
off to the rest of the program, which is the continuation, once it's been
received.

#+BEGIN_SRC elixir
def continue_program_with(data) do
  # Continues program with data
end

case File.read("/path/to/file") do
  {:ok, response} -> continue_program_with(response)
  {:error, reason} => # handle error
end
#+END_SRC

** Purity
:PROPERTIES:
:CUSTOM_ID: purity
:END:

A function is pure if the return value is only determined by its input values,
and does not produce side effects.

#+BEGIN_SRC elixir
def greet(name), do: "Hi, #{name}"

greet("Brianne") # => "Hi, Brianne"
#+END_SRC

As opposed to this function, which reads from the outside state (a file).

#+BEGIN_SRC elixir
def greet() do
  name = File.read!("/path/to/file")
  "Hi, #{name}"
end
#+END_SRC
** TODO Side effects
:PROPERTIES:
:CUSTOM_ID: side-effects
:END:

A function or expression is said to have a side effect if apart from
returning a value, it interacts with (reads from or writes to) external
mutable state.

#+BEGIN_SRC elixir
    const differentEveryTime = new Date()
#+END_SRC

#+BEGIN_SRC elixir
    console.log('IO is a side effect!')
#+END_SRC

** TODO Idempotent
:PROPERTIES:
:CUSTOM_ID: idempotent
:END:

A function is idempotent if reapplying it to its result does not produce
a different result.

#+BEGIN_SRC elixir
    f(f(x)) ≍ f(x)
#+END_SRC

#+BEGIN_SRC elixir
    Math.abs(Math.abs(10))
#+END_SRC

#+BEGIN_SRC elixir
    sort(sort(sort([2, 1])))
#+END_SRC

** TODO Point-Free Style
:PROPERTIES:
:CUSTOM_ID: point-free-style
:END:

Writing functions where the definition does not explicitly identify the
arguments used. This style usually requires [[#currying][currying]] or
other [[#higher-order-functions-hof][Higher-Order functions]]. A.K.A
Tacit programming.

#+BEGIN_SRC elixir
    // Given
    const map = (fn) => (list) => list.map(fn)
    const add = (a) => (b) => a + b

    // Then

    // Not points-free - `numbers` is an explicit argument
    const incrementAll = (numbers) => map(add(1))(numbers)

    // Points-free - The list is an implicit argument
    const incrementAll2 = map(add(1))
#+END_SRC

=incrementAll= identifies and uses the parameter =numbers=, so it is not
points-free. =incrementAll2= is written just by combining functions and
values, making no mention of its arguments. It *is* TODO points-free.

Points-free function definitions look just like normal assignments
without =function= or ==>=.

** TODO Predicate
:PROPERTIES:
:CUSTOM_ID: predicate
:END:

A predicate is a function that returns true or false for a given value.
A common use of a predicate is as the callback for array filter.

#+BEGIN_SRC elixir
    const predicate = (a) => a > 2

    ;[1, 2, 3, 4].filter(predicate) // [3, 4]
#+END_SRC

** TODO Contracts
:PROPERTIES:
:CUSTOM_ID: contracts
:END:

A contract specifies the obligations and guarantees of the behavior from
a function or expression at runtime. This acts as a set of rules that
are expected from the input and output of a function or expression, and
errors are generally reported whenever a contract is violated.

#+BEGIN_SRC elixir
    // Define our contract : int -> boolean
    const contract = (input) => {
      if (typeof input === 'number') return true
      throw new Error('Contract violated: expected int -> boolean')
    }

    const addOne = (num) => contract(num) && num + 1

    addOne(2) // 3
    addOne('some string') // Contract violated: expected int -> boolean
#+END_SRC

** TODO Category
:PROPERTIES:
:CUSTOM_ID: category
:END:

A category in category theory is a collection of objects and morphisms
between them. In programming, typically types act as the objects and
functions as morphisms.

To be a valid category 3 rules must be met:

1. There must be an identity morphism that maps an object to itself.
   Where =a= is an object in some category, there must be a function
   from =a -> a=.
2. Morphisms must compose. Where =a=, =b=, and =c= are objects in some
   category, and =f= is a morphism from =a -> b=, and =g= is a morphism
   from =b -> c=; =g(f(x))= must be equivalent to =(g • f)(x)=.
3. Composition must be associative =f • (g • h)= is the same as
   =(f • g) • h=

Since these rules govern composition at very abstract level, category
theory is great at uncovering new ways of composing things.

*Further reading*

- [[https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/][Category
  Theory for Programmers]]

** TODO Value
:PROPERTIES:
:CUSTOM_ID: value
:END:

Anything that can be assigned to a variable.

#+BEGIN_SRC elixir
    5
    Object.freeze({name: 'John', age: 30}) // The `freeze` function enforces immutability.
    ;(a) => a
    ;[1]
    undefined
#+END_SRC

** TODO Constant
:PROPERTIES:
:CUSTOM_ID: constant
:END:

A variable that cannot be reassigned once defined.

#+BEGIN_SRC elixir
    const five = 5
    const john = Object.freeze({name: 'John', age: 30})
#+END_SRC

Constants are [[#referential-transparency][referentially transparent]].
That is, they can be replaced with the values that they represent
without affecting the result.

With the above two constants the following expression will always return
=true=.

#+BEGIN_SRC elixir
    john.age + five === ({name: 'John', age: 30}).age + (5)
#+END_SRC

** TODO Functor
:PROPERTIES:
:CUSTOM_ID: functor
:END:

An object that implements a =map= function which, while running over
each value in the object to produce a new object, adheres to two rules:

*Preserves identity*

#+BEGIN_SRC elixir
    object.map(x => x) ≍ object
#+END_SRC

*Composable*

#+BEGIN_SRC elixir
    object.map(compose(f, g)) ≍ object.map(g).map(f)
#+END_SRC

(=f=, =g= are arbitrary functions)

A common functor in JavaScript is =Array= since it abides to the two
functor rules:

#+BEGIN_SRC elixir
    ;[1, 2, 3].map(x => x) // = [1, 2, 3]
#+END_SRC

and

#+BEGIN_SRC elixir
    const f = x => x + 1
    const g = x => x * TODO 2

    ;[1, 2, 3].map(x => f(g(x))) // = [3, 5, 7]
    ;[1, 2, 3].map(g).map(f)     // = [3, 5, 7]
#+END_SRC

** TODO Pointed Functor
:PROPERTIES:
:CUSTOM_ID: pointed-functor
:END:

An object with an =of= function that puts /any/ single value into it.

ES2015 adds =Array.of= making arrays a pointed functor.

#+BEGIN_SRC elixir
    Array.of(1) // [1]
#+END_SRC

** TODO Lift
:PROPERTIES:
:CUSTOM_ID: lift
:END:

Lifting is when you take a value and put it into an object like a
[[#pointed-functor][functor]]. If you lift a function into an
[[#applicative-functor][Applicative Functor]] then you can make it work
on values that are also in that functor.

Some implementations have a function called =lift=, or =liftA2= to make
it easier to run functions on functors.

#+BEGIN_SRC elixir
    const liftA2 = (f) => (a, b) => a.map(f).ap(b) // note it's `ap` and not `map`.

    const mult = a => b => a * TODO b

    const liftedMult = liftA2(mult) // this function now works on functors like array

    liftedMult([1, 2], [3]) // [3, 6]
    liftA2(a => b => a + b)([1, 2], [3, 4]) // [4, 5, 5, 6]
#+END_SRC

Lifting a one-argument function and applying it does the same thing as
=map=.

#+BEGIN_SRC elixir
    const increment = (x) => x + 1

    lift(increment)([2]) // [3]
    ;[2].map(increment) // [3]
#+END_SRC

** TODO Referential Transparency
:PROPERTIES:
:CUSTOM_ID: referential-transparency
:END:

An expression that can be replaced with its value without changing the
behavior of the program is said to be referentially transparent.

Say we have function greet:

#+BEGIN_SRC elixir
    const greet = () => 'Hello World!'
#+END_SRC

Any invocation of =greet()= can be replaced with =Hello World!= hence
greet is referentially transparent.

** TODO Equational Reasoning
:PROPERTIES:
:CUSTOM_ID: equational-reasoning
:END:

When an application is composed of expressions and devoid of side
effects, truths about the system can be derived from the parts.

** TODO Lambda
:PROPERTIES:
:CUSTOM_ID: lambda
:END:

An anonymous function that can be treated like a value.

#+BEGIN_SRC elixir
    ;(function (a) {
      return a + 1
    })

    ;(a) => a + 1
#+END_SRC

Lambdas are often passed as arguments to Higher-Order functions.

#+BEGIN_SRC elixir
    ;[1, 2].map((a) => a + 1) // [2, 3]
#+END_SRC

You can assign a lambda to a variable.

#+BEGIN_SRC elixir
    const add1 = (a) => a + 1
#+END_SRC

** TODO Lambda Calculus
:PROPERTIES:
:CUSTOM_ID: lambda-calculus
:END:

A branch of mathematics that uses functions to create a
[[https://en.wikipedia.org/wiki/Lambda_calculus][universal model of
computation]].

** TODO Lazy evaluation
:PROPERTIES:
:CUSTOM_ID: lazy-evaluation
:END:

Lazy evaluation is a call-by-need evaluation mechanism that delays the
evaluation of an expression until its value is needed. In functional
languages, this allows for structures like infinite lists, which would
not normally be available in an imperative language where the sequencing
of commands is significant.

#+BEGIN_SRC elixir
    const rand = function*() {
      while (1 < 2) {
        yield Math.random()
      }
    }
#+END_SRC

#+BEGIN_SRC elixir
    const randIter = rand()
    randIter.next() // Each execution gives a random value, expression is evaluated on need.
#+END_SRC

** TODO Monoid
:PROPERTIES:
:CUSTOM_ID: monoid
:END:

An object with a function that "combines" that object with another of
the same type.

One simple monoid is the addition of numbers:

#+BEGIN_SRC elixir
    1 + 1 // 2
#+END_SRC

In this case number is the object and =+= is the function.

An "identity" value must also exist that when combined with a value
doesn't change it.

The identity value for addition is =0=.

#+BEGIN_SRC elixir
    1 + 0 // 1
#+END_SRC

It's also required that the grouping of operations will not affect the
result (associativity):

#+BEGIN_SRC elixir
    1 + (2 + 3) === (1 + 2) + 3 // true
#+END_SRC

Array concatenation also forms a monoid:

#+BEGIN_SRC elixir
    ;[1, 2].concat([3, 4]) // [1, 2, 3, 4]
#+END_SRC

The identity value is empty array =[]=

#+BEGIN_SRC elixir
    ;[1, 2].concat([]) // [1, 2]
#+END_SRC

If identity and compose functions are provided, functions themselves
form a monoid:

#+BEGIN_SRC elixir
    const identity = (a) => a
    const compose = (f, g) => (x) => f(g(x))
#+END_SRC

=foo= is any function that takes one argument.

#+BEGIN_SRC elixir
    compose(foo, identity) ≍ compose(identity, foo) ≍ foo
#+END_SRC

** TODO Monad
:PROPERTIES:
:CUSTOM_ID: monad
:END:

A monad is an object with [[#pointed-functor][=of=]] and =chain=
functions. =chain= is like [[#functor][=map=]] except it un-nests the
resulting nested object.

#+BEGIN_SRC elixir
    // Implementation
    Array.prototype.chain = function (f) {
      return this.reduce((acc, it) => acc.concat(f(it)), [])
    }

    // Usage
    Array.of('cat,dog', 'fish,bird').chain((a) => a.split(',')) // ['cat', 'dog', 'fish', 'bird']

    // Contrast to map
    Array.of('cat,dog', 'fish,bird').map((a) => a.split(',')) // [['cat', 'dog'], ['fish', 'bird']]
#+END_SRC

=of= is also known as =return= in other functional languages. =chain= is
also known as =flatmap= and =bind= in other languages.

** TODO Comonad
:PROPERTIES:
:CUSTOM_ID: comonad
:END:

An object that has =extract= and =extend= functions.

#+BEGIN_SRC elixir
    const CoIdentity = (v) => ({
      val: v,
      extract () {
        return this.val
      },
      extend (f) {
        return CoIdentity(f(this))
      }
    })
#+END_SRC

Extract takes a value out of a functor.

#+BEGIN_SRC elixir
    CoIdentity(1).extract() // 1
#+END_SRC

Extend runs a function on the comonad. The function should return the
same type as the comonad.

#+BEGIN_SRC elixir
    CoIdentity(1).extend((co) => co.extract() + 1) // CoIdentity(2)
#+END_SRC

** TODO Applicative Functor
:PROPERTIES:
:CUSTOM_ID: applicative-functor
:END:

An applicative functor is an object with an =ap= function. =ap= applies
a function in the object to a value in another object of the same type.

#+BEGIN_SRC elixir
    // Implementation
    Array.prototype.ap = function (xs) {
      return this.reduce((acc, f) => acc.concat(xs.map(f)), [])
    }

    // Example usage
    ;[(a) => a + 1].ap([1]) // [2]
#+END_SRC

This is useful if you have two objects and you want to apply a binary
function to their contents.

#+BEGIN_SRC elixir
    // Arrays that you want to combine
    const arg1 = [1, 3]
    const arg2 = [4, 5]

    // combining function - must be curried for this to work
    const add = (x) => (y) => x + y

    const partiallyAppliedAdds = [add].ap(arg1) // [(y) => 1 + y, (y) => 3 + y]
#+END_SRC

This gives you an array of functions that you can call =ap= on to get
the result:

#+BEGIN_SRC elixir
    partiallyAppliedAdds.ap(arg2) // [5, 6, 7, 8]
#+END_SRC

** TODO Morphism
:PROPERTIES:
:CUSTOM_ID: morphism
:END:

A transformation function.

*** TODO Endomorphism
:PROPERTIES:
:CUSTOM_ID: endomorphism
:END:

A function where the input type is the same as the output.

#+BEGIN_SRC elixir
    // uppercase :: String -> String
    const uppercase = (str) => str.toUpperCase()

    // decrement :: Number -> Number
    const decrement = (x) => x - 1
#+END_SRC

*** TODO Isomorphism
:PROPERTIES:
:CUSTOM_ID: isomorphism
:END:

A pair of transformations between 2 types of objects that is structural
in nature and no data is lost.

For example, 2D coordinates could be stored as an array =[2,3]= or
object ={x: 2, y: 3}=.

#+BEGIN_SRC elixir
    // Providing functions to convert in both directions makes them isomorphic.
    const pairToCoords = (pair) => ({x: pair[0], y: pair[1]})

    const coordsToPair = (coords) => [coords.x, coords.y]

    coordsToPair(pairToCoords([1, 2])) // [1, 2]

    pairToCoords(coordsToPair({x: 1, y: 2})) // {x: 1, y: 2}
#+END_SRC

*** TODO Homomorphism
:PROPERTIES:
:CUSTOM_ID: homomorphism
:END:

A homomorphism is just a structure preserving map. In fact, a functor is
just a homomorphism between categories as it preserves the original
category's structure under the mapping.

#+BEGIN_SRC elixir
    A.of(f).ap(A.of(x)) == A.of(f(x))

    Either.of(_.toUpper).ap(Either.of("oreos")) == Either.of(_.toUpper("oreos"))
#+END_SRC

*** TODO Catamorphism
:PROPERTIES:
:CUSTOM_ID: catamorphism
:END:

A =reduceRight= function that applies a function against an accumulator
and each value of the array (from right-to-left) to reduce it to a
single value.

#+BEGIN_SRC elixir
    const sum = xs => xs.reduceRight((acc, x) => acc + x, 0)

    sum([1, 2, 3, 4, 5]) // 15
#+END_SRC

*** TODO Anamorphism
:PROPERTIES:
:CUSTOM_ID: anamorphism
:END:

An =unfold= function. An =unfold= is the opposite of =fold= (=reduce=).
It generates a list from a single value.

#+BEGIN_SRC elixir
    const unfold = (f, seed) => {
      function go(f, seed, acc) {
        const res = f(seed);
        return res ? go(f, res[1], acc.concat([res[0]])) : acc;
      }
      return go(f, seed, [])
    }
#+END_SRC

#+BEGIN_SRC elixir
    const countDown = n => unfold((n) => {
      return n <= 0 ? undefined : [n, n - 1]
    }, n)

    countDown(5) // [5, 4, 3, 2, 1]
#+END_SRC

*** TODO Hylomorphism
:PROPERTIES:
:CUSTOM_ID: hylomorphism
:END:

The combination of anamorphism and catamorphism.

*** TODO Paramorphism
:PROPERTIES:
:CUSTOM_ID: paramorphism
:END:

A function just like =reduceRight=. However, there's a difference:

In paramorphism, your reducer's arguments are the current value, the
reduction of all previous values, and the list of values that formed
that reduction.

#+BEGIN_SRC elixir
    // Obviously not safe for lists containing `undefined`,
    // but good enough to make the point.
    const para = (reducer, accumulator, elements) => {
      if (elements.length === 0)
        return accumulator

      const head = elements[0]
      const tail = elements.slice(1)

      return reducer(head, tail, para(reducer, accumulator, tail))
    }

    const suffixes = list => para(
      (x, xs, suffxs) => [xs, ... suffxs],
      [],
      list
    )

    suffixes([1, 2, 3, 4, 5]) // [[2, 3, 4, 5], [3, 4, 5], [4, 5], [5], []]
#+END_SRC

The third parameter in the reducer (in the above example, =[x, ... xs]=)
is kind of like having a history of what got you to your current acc
value.

*** TODO Apomorphism
:PROPERTIES:
:CUSTOM_ID: apomorphism
:END:

it's the opposite of paramorphism, just as anamorphism is the opposite
of catamorphism. Whereas with paramorphism, you combine with access to
the accumulator and what has been accumulated, apomorphism lets you
=unfold= with the potential to return early.

** TODO Setoid
:PROPERTIES:
:CUSTOM_ID: setoid
:END:

An object that has an =equals= function which can be used to compare
other objects of the same type.

Make array a setoid:

#+BEGIN_SRC elixir
    Array.prototype.equals = function (arr) {
      const len = this.length
      if (len !== arr.length) {
        return false
      }
      for (let i = 0; i < len; i++) {
        if (this[i] !== arr[i]) {
          return false
        }
      }
      return true
    }

    ;[1, 2].equals([1, 2]) // true
    ;[1, 2].equals([0]) // false
#+END_SRC

** TODO Semigroup
:PROPERTIES:
:CUSTOM_ID: semigroup
:END:

An object that has a =concat= function that combines it with another
object of the same type.

#+BEGIN_SRC elixir
    ;[1].concat([2]) // [1, 2]
#+END_SRC

** TODO Foldable
:PROPERTIES:
:CUSTOM_ID: foldable
:END:

An object that has a =reduce= function that applies a function against
an accumulator and each element in the array (from left to right) to
reduce it to a single value.

#+BEGIN_SRC elixir
    const sum = (list) => list.reduce((acc, val) => acc + val, 0)
    sum([1, 2, 3]) // 6
#+END_SRC

** TODO Lens
:PROPERTIES:
:CUSTOM_ID: lens
:END:

A lens is a structure (often an object or function) that pairs a getter
and a non-mutating setter for some other data structure.

#+BEGIN_SRC elixir
    // Using [Ramda's lens](http://ramdajs.com/docs/#lens)
    const nameLens = R.lens(
      // getter for name property on an object
      (obj) => obj.name,
      // setter for name property
      (val, obj) => Object.assign({}, obj, {name: val})
    )
#+END_SRC

Having the pair of get and set for a given data structure enables a few
key features.

#+BEGIN_SRC elixir
    const person = {name: 'Gertrude Blanch'}

    // invoke the getter
    R.view(nameLens, person) // 'Gertrude Blanch'

    // invoke the setter
    R.set(nameLens, 'Shafi Goldwasser', person) // {name: 'Shafi Goldwasser'}

    // run a function on the value in the structure
    R.over(nameLens, uppercase, person) // {name: 'GERTRUDE BLANCH'}
#+END_SRC

Lenses are also composable. This allows easy immutable updates to deeply
nested data.

#+BEGIN_SRC elixir
    // This lens focuses on the first item in a non-empty array
    const firstLens = R.lens(
      // get first item in array
      xs => xs[0],
      // non-mutating setter for first item in array
      (val, [__, ...xs]) => [val, ...xs]
    )

    const people = [{name: 'Gertrude Blanch'}, {name: 'Shafi Goldwasser'}]

    // Despite what you may assume, lenses compose left-to-right.
    R.over(compose(firstLens, nameLens), uppercase, people) // [{'name': 'GERTRUDE BLANCH'}, {'name': 'Shafi Goldwasser'}]
#+END_SRC

Other implementations: *
[[https://github.com/calmm-js/partial.lenses][partial.lenses]] - Tasty
syntax sugar and a lot of powerful features *
[[http://www.kovach.me/nanoscope/][nanoscope]] - Fluent-interface

** TODO Type Signatures
:PROPERTIES:
:CUSTOM_ID: type-signatures
:END:

Often functions in JavaScript will include comments that indicate the
types of their arguments and return values.

There's quite a bit of variance across the community but they often
follow the following patterns:

#+BEGIN_SRC elixir
    // functionName :: firstArgType -> secondArgType -> returnType

    // add :: Number -> Number -> Number
    const add = (x) => (y) => x + y

    // increment :: Number -> Number
    const increment = (x) => x + 1
#+END_SRC

If a function accepts another function as an argument it is wrapped in
parentheses.

#+BEGIN_SRC elixir
    // call :: (a -> b) -> a -> b
    const call = (f) => (x) => f(x)
#+END_SRC

The letters =a=, =b=, =c=, =d= are used to signify that the argument can
be of any type. The following version of =map= takes a function that
transforms a value of some type =a= into another type =b=, an array of
values of type =a=, and returns an array of values of type =b=.

#+BEGIN_SRC elixir
    // map :: (a -> b) -> [a] -> [b]
    const map = (f) => (list) => list.map(f)
#+END_SRC

*Further reading* TODO *
[[https://github.com/ramda/ramda/wiki/Type-Signatures][Ramda's type
signatures]] *
[[https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch7.html#whats-your-type][Mostly
Adequate Guide]] * TODO [[http://stackoverflow.com/a/399392/22425][What is
Hindley-Milner?]] on Stack Overflow

** TODO Algebraic data type
:PROPERTIES:
:CUSTOM_ID: algebraic-data-type
:END:

A composite type made from putting other types together. Two common
classes of algebraic types are [[#sum-type][sum]] and
[[#product-type][product]].

*** TODO Sum type
:PROPERTIES:
:CUSTOM_ID: sum-type
:END:

A Sum type is the combination of two types together into another one. It
is called sum because the number of possible values in the result type
is the sum of the input types.

JavaScript doesn't have types like this but we can use =Set=s to
pretend:

#+BEGIN_SRC elixir
    // imagine that rather than sets here we have types that can only have these values
    const bools = new Set([true, false])
    const halfTrue = new Set(['half-true'])

    // The weakLogic type contains the sum of the values from bools and halfTrue
    const weakLogicValues = new Set([...bools, ...halfTrue])
#+END_SRC

Sum types are sometimes called union types, discriminated unions, or
tagged unions.

There's a [[https://github.com/paldepind/union-type][couple]]
[[https://github.com/puffnfresh/daggy][libraries]] in JS which help with
defining and using union types.

Flow includes [[https://flow.org/en/docs/types/unions/][union types]]
and TypeScript has
[[https://www.typescriptlang.org/docs/handbook/enums.html][Enums]] to
serve the same role.

*** TODO Product type
:PROPERTIES:
:CUSTOM_ID: product-type
:END:

A *product* TODO type combines types together in a way you're probably more
familiar with:

#+BEGIN_SRC elixir
    // point :: (Number, Number) -> {x: Number, y: Number}
    const point = (x, y) => ({ x, y })
#+END_SRC

It's called a product because the total possible values of the data
structure is the product of the different values. Many languages have a
tuple type which is the simplest formulation of a product type.

See also [[https://en.wikipedia.org/wiki/Set_theory][Set theory]].

** TODO Option
:PROPERTIES:
:CUSTOM_ID: option
:END:

Option is a [[#sum-type][sum type]] with two cases often called =Some=
and =None=.

Option is useful for composing functions that might not return a value.

#+BEGIN_SRC elixir
    // Naive definition

    const Some = (v) => ({
      val: v,
      map (f) {
        return Some(f(this.val))
      },
      chain (f) {
        return f(this.val)
      }
    })

    const None = () => ({
      map (f) {
        return this
      },
      chain (f) {
        return this
      }
    })

    // maybeProp :: (String, {a}) -> Option a
    const maybeProp = (key, obj) => typeof obj[key] === 'undefined' ? None() : Some(obj[key])
#+END_SRC

Use =chain= to sequence functions that return =Option=s

#+BEGIN_SRC elixir

    // getItem :: Cart -> Option CartItem
    const getItem = (cart) => maybeProp('item', cart)

    // getPrice :: Item -> Option Number
    const getPrice = (item) => maybeProp('price', item)

    // getNestedPrice :: cart -> Option a
    const getNestedPrice = (cart) => getItem(cart).chain(getPrice)

    getNestedPrice({}) // None()
    getNestedPrice({item: {foo: 1}}) // None()
    getNestedPrice({item: {price: 9.99}}) // Some(9.99)
#+END_SRC

=Option= is also known as =Maybe=. =Some= is sometimes called =Just=.
=None= is sometimes called =Nothing=.

** TODO Function
:PROPERTIES:
:CUSTOM_ID: function
:END:

A *function* TODO =f :: A => B= is an expression - often called arrow or
lambda expression - with *exactly one (immutable)* TODO parameter of type =A=
and *exactly one* TODO return value of type =B=. That value depends entirely
on the argument, making functions context-independant, or
[[#referential-transparency][referentially transparent]]. What is
implied here is that a function must not produce any hidden
[[#side-effects][side effects]] - a function is always
[[#purity][pure]], by definition. These properties make functions
pleasant to work with: they are entirely deterministic and therefore
predictable. Functions enable working with code as data, abstracting
over behaviour:

#+BEGIN_SRC elixir
    // times2 :: Number -> Number
    const times2 = n => n * TODO 2

    [1, 2, 3].map(times2) // [2, 4, 6]
#+END_SRC

** TODO Partial function
:PROPERTIES:
:CUSTOM_ID: partial-function
:END:

A partial function is a [[#function][function]] which is not defined for
all arguments - it might return an unexpected result or may never
terminate. Partial functions add cognitive overhead, they are harder to
reason about and can lead to runtime errors. Some examples:

#+BEGIN_SRC elixir
    // example 1: sum of the list
    // sum :: [Number] -> Number
    const sum = arr => arr.reduce((a, b) => a + b)
    sum([1, 2, 3]) // 6
    sum([]) // TypeError: Reduce of empty array with no initial value

    // example 2: get the first item in list
    // first :: [A] -> A
    const first = a => a[0]
    first([42]) // 42
    first([]) // undefined
    //or even worse:
    first([[42]])[0] // 42
    first([])[0] // Uncaught TypeError: Cannot read property '0' of undefined

    // example 3: repeat function N times
    // times :: Number -> (Number -> Number) -> Number
    const times = n => fn => n && (fn(n), times(n - 1)(fn))
    times(3)(console.log)
    // 3
    // 2
    // 1
    times(-1)(console.log)
    // RangeError: Maximum call stack size exceeded
#+END_SRC

*** TODO Dealing with partial functions
:PROPERTIES:
:CUSTOM_ID: dealing-with-partial-functions
:END:

Partial functions are dangerous as they need to be treated with great
caution. You might get an unexpected (wrong) result or run into runtime
errors. Sometimes a partial function might not return at all. Being
aware of and treating all these edge cases accordingly can become very
tedious. Fortunately a partial function can be converted to a regular
(or total) one. We can provide default values or use guards to deal with
inputs for which the (previously) partial function is undefined.
Utilizing the [[#Option][=Option=]] type, we can yield either
=Some(value)= or =None= where we would otherwise have behaved
unexpectedly:

#+BEGIN_SRC elixir
    // example 1: sum of the list
    // we can provide default value so it will always return result
    // sum :: [Number] -> Number
    const sum = arr => arr.reduce((a, b) => a + b, 0)
    sum([1, 2, 3]) // 6
    sum([]) // 0

    // example 2: get the first item in list
    // change result to Option
    // first :: [A] -> Option A
    const first = a => a.length ? Some(a[0]) : None()
    first([42]).map(a => console.log(a)) // 42
    first([]).map(a => console.log(a)) // console.log won't execute at all
    //our previous worst case
    first([[42]]).map(a => console.log(a[0])) // 42
    first([]).map(a => console.log(a[0])) // won't execte, so we won't have error here
    // more of that, you will know by function return type (Option)
    // that you should use `.map` method to access the data and you will never forget
    // to check your input because such check become built-in into the function

    // example 3: repeat function N times
    // we should make function always terminate by changing conditions:
    // times :: Number -> (Number -> Number) -> Number
    const times = n => fn => n > 0 && (fn(n), times(n - 1)(fn))
    times(3)(console.log)
    // 3
    // 2
    // 1
    times(-1)(console.log)
    // won't execute anything
#+END_SRC

Making your partial functions total ones, these kinds of runtime errors
can be prevented. Always returning a value will also make for code that
is both easier to maintain as well as to reason about.

